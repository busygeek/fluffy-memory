package com.example.websocketclient;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class WebSocketController {

    @GetMapping("/connect")
    public String connectWebSocket() {
        try {
            WebSocketClientExample client = new WebSocketClientExample();
            client.connectBlocking(); // Waits for the connection to be established
            return "WebSocket connection initiated";
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            return "Failed to initiate WebSocket connection: " + e.getMessage();
        }
    }
}




package com.example.websocketclient;

import org.apache.http.client.utils.URIBuilder;
import org.java_websocket.client.WebSocketClient;
import org.java_websocket.handshake.ServerHandshake;

import javax.json.Json;
import javax.json.JsonArrayBuilder;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Map;

public class WebSocketClientExample extends WebSocketClient {

    public WebSocketClientExample() throws URISyntaxException {
        super(createUri());
        addHeaders();
    }

    private static URI createUri() throws URISyntaxException {
        JsonArrayBuilder eventTypes = Json.createArrayBuilder()
            .add("zoneTransition");

        Map<String, String> queryParams = new HashMap<>();
        queryParams.put("enterpriseId", "111111");
        queryParams.put("eventTypes", eventTypes.build().toString());

        URIBuilder uriBuilder = new URIBuilder("wss://abc.com/api/v1/streaming/");
        queryParams.forEach(uriBuilder::addParameter);

        return uriBuilder.build();
    }

    private void addHeaders() {
        this.addHeader("Authorization", "Bearer " + getToken());
        this.addHeader("x-dsp-selected-tenant-role", "na");
    }

    private static String getToken() {
        return ""; // Implement your token retrieval logic here
    }

    @Override
    public void onOpen(ServerHandshake handshakedata) {
        System.out.println("Opened connection");
    }

    @Override
    public void onMessage(String message) {
        System.out.println("Received: " + message);
    }

    @Override
    public void onClose(int code, String reason, boolean remote) {
        System.out.println("Closed with exit code " + code + " additional info: " + reason);
    }

    @Override
    public void onError(Exception ex) {
        System.err.println("An error occurred:" + ex);
    }
}


<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
        <groupId>org.java-websocket</groupId>
        <artifactId>Java-WebSocket</artifactId>
        <version>1.5.2</version>
    </dependency>
    <dependency>
        <groupId>org.glassfish</groupId>
        <artifactId>javax.json</artifactId>
        <version>1.1.4</version>
    </dependency>
</dependencies>




















import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.reactive.socket.WebSocketMessage;
import org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient;
import org.springframework.web.reactive.socket.client.WebSocketClient;
import reactor.core.publisher.Mono;

import java.net.URI;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.HashMap;
import java.util.Map;

@SpringBootApplication
public class WebSocketClientApplication {

    public static void main(String[] args) {
        SpringApplication.run(WebSocketClientApplication.class, args);
        runWebSocketClient();
    }

    private static String getToken() {
        return "";
    }

    private static void runWebSocketClient() {
        Map<String, String> queryParams = new HashMap<>();
        queryParams.put("enterpriseId", "111111");
        queryParams.put("eventTypes", "zoneTransition");

        String queryString = queryParams.entrySet().stream()
                .map(entry -> entry.getKey() + "=" + URLEncoder.encode(entry.getValue(), StandardCharsets.UTF_8))
                .reduce((p1, p2) -> p1 + "&" + p2)
                .orElse("");

        String uri = String.format("wss://abc.com/api/v1/streaming/?%s", queryString);

        WebSocketClient client = new ReactorNettyWebSocketClient();

        client.execute(
                URI.create(uri),
                session -> session.receive()
                        .map(WebSocketMessage::getPayloadAsText)
                        .doOnNext(System.out::println)
                        .then())
                .block(Duration.ofSeconds(10));
    }
}





import express from 'express';
import { exec } from 'child_process';

const app = express();
const port = 5000;

app.use(express.json());

app.post('/open-eclipse', (req, res) => {
  // Replace the path with the actual path to your Eclipse executable
  const eclipsePath = '"C:\\Path\\To\\Eclipse\\eclipse.exe"'; // For Windows
  // const eclipsePath = '/path/to/eclipse/eclipse'; // For Linux/Mac

  exec(eclipsePath, (error) => {
    if (error) {
      console.error(`Error opening Eclipse: ${error}`);
      return res.status(500).send('Failed to open Eclipse');
    }
    res.send('Eclipse opened successfully');
  });
});

app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});



import React from 'react';

const App = () => {
  const openEclipse = async () => {
    try {
      const response = await fetch('http://localhost:5000/open-eclipse', {
        method: 'POST',
      });
      if (response.ok) {
        console.log('Eclipse opened successfully');
      } else {
        console.error('Failed to open Eclipse');
      }
    } catch (error) {
      console.error('Error:', error);
    }
  };

  return (
    <div>
      <button onClick={openEclipse}>Open Eclipse IDE</button>
    </div>
  );
};

export default App;


